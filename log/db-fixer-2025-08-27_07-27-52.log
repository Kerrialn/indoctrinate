[START] DB Fix started at 2025-08-27 07:27:52
Running rule: ensure_auto_increment_primary_key [Integrity]
[ensure auto increment primary key] core_settings.slug: VARCHAR(30) PRIMARY KEY → Single-column primary key is not integer; skipping (set replace_single_non_int_primary=true to add an integer id primary key)
[ensure auto increment primary key] default_ci_sessions.session_id: VARCHAR(40) PRIMARY KEY → Single-column primary key is not integer; skipping (set replace_single_non_int_primary=true to add an integer id primary key)
[ensure auto increment primary key] default_comment_tags.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_files.id: CHAR(15) PRIMARY KEY → Single-column primary key is not integer; skipping (set replace_single_non_int_primary=true to add an integer id primary key)
[ensure auto increment primary key] default_memberships.tt_membership_id: INT UNSIGNED PRIMARY KEY → Already a single integer primary key (leave as-is)
[ensure auto increment primary key] default_mtable_filters.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_pipeline_stages.stage_id: INT UNSIGNED PRIMARY KEY → Already a single integer primary key (leave as-is)
[ensure auto increment primary key] default_profiles_note_category_associations.id: plan → composite primary key → add `id`, keep old key UNIQUE, make `id` primary (current primary key: (`note_id`, `category_id`)) ; ALTER TABLE `default_profiles_note_category_associations` ADD COLUMN `id` INT UNSIGNED NULL  →  SET @row := 0  →  UPDATE `default_profiles_note_category_associations` SET `id` = (@row := @row + 1) ORDER BY `note_id` ASC, `category_id` ASC  →  ALTER TABLE `default_profiles_note_category_associations` ADD UNIQUE `uniq_default_profiles_note_category_associations_old_pk_a80dfcac` (`note_id`, `category_id`)  →  ALTER TABLE `default_profiles_note_category_associations` DROP PRIMARY KEY  →  ALTER TABLE `default_profiles_note_category_associations` MODIFY COLUMN `id` INT UNSIGNED NOT NULL  →  ALTER TABLE `default_profiles_note_category_associations` ADD PRIMARY KEY (`id`)  →  SET @mx := (SELECT MAX(`id`) FROM `default_profiles_note_category_associations`)  →  SET @next := IFNULL(@mx, 0) + 1  →  ALTER TABLE `default_profiles_note_category_associations` MODIFY COLUMN `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT = @next
[ensure auto increment primary key] default_profiles_note_user_associations.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_push_notification_type_user_associations.id: plan → composite primary key → add `id`, keep old key UNIQUE, make `id` primary (current primary key: (`push_notification_type_id`, `user_id`)) ; ALTER TABLE `default_push_notification_type_user_associations` ADD COLUMN `id` INT UNSIGNED NULL  →  SET @row := 0  →  UPDATE `default_push_notification_type_user_associations` SET `id` = (@row := @row + 1) ORDER BY `push_notification_type_id` ASC, `user_id` ASC  →  ALTER TABLE `default_push_notification_type_user_associations` ADD UNIQUE `uniq_default_push_notification_type_user_associations_o_079fbc58` (`push_notification_type_id`, `user_id`)  →  ALTER TABLE `default_push_notification_type_user_associations` DROP PRIMARY KEY  →  ALTER TABLE `default_push_notification_type_user_associations` MODIFY COLUMN `id` INT UNSIGNED NOT NULL  →  ALTER TABLE `default_push_notification_type_user_associations` ADD PRIMARY KEY (`id`)  →  SET @mx := (SELECT MAX(`id`) FROM `default_push_notification_type_user_associations`)  →  SET @next := IFNULL(@mx, 0) + 1  →  ALTER TABLE `default_push_notification_type_user_associations` MODIFY COLUMN `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT = @next
[ensure auto increment primary key] default_push_notification_user_associations.id: plan → composite primary key → add `id`, keep old key UNIQUE, make `id` primary (current primary key: (`push_notification_id`, `user_id`)) ; ALTER TABLE `default_push_notification_user_associations` ADD COLUMN `id` INT UNSIGNED NULL  →  SET @row := 0  →  UPDATE `default_push_notification_user_associations` SET `id` = (@row := @row + 1) ORDER BY `push_notification_id` ASC, `user_id` ASC  →  ALTER TABLE `default_push_notification_user_associations` ADD UNIQUE `uniq_default_push_notification_user_associations_old_pk_286b29ec` (`push_notification_id`, `user_id`)  →  ALTER TABLE `default_push_notification_user_associations` DROP PRIMARY KEY  →  ALTER TABLE `default_push_notification_user_associations` MODIFY COLUMN `id` INT UNSIGNED NOT NULL  →  ALTER TABLE `default_push_notification_user_associations` ADD PRIMARY KEY (`id`)  →  SET @mx := (SELECT MAX(`id`) FROM `default_push_notification_user_associations`)  →  SET @next := IFNULL(@mx, 0) + 1  →  ALTER TABLE `default_push_notification_user_associations` MODIFY COLUMN `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT = @next
[ensure auto increment primary key] default_settings.id: plan → composite primary key → add `id`, keep old key UNIQUE, make `id` primary (current primary key: (`slug`, `site_id`)) ; ALTER TABLE `default_settings` ADD COLUMN `id` INT UNSIGNED NULL  →  SET @row := 0  →  UPDATE `default_settings` SET `id` = (@row := @row + 1) ORDER BY `slug` ASC, `site_id` ASC  →  ALTER TABLE `default_settings` ADD UNIQUE `uniq_default_settings_old_pk_90d6a5fa` (`slug`, `site_id`)  →  ALTER TABLE `default_settings` DROP PRIMARY KEY  →  ALTER TABLE `default_settings` MODIFY COLUMN `id` INT UNSIGNED NOT NULL  →  ALTER TABLE `default_settings` ADD PRIMARY KEY (`id`)  →  SET @mx := (SELECT MAX(`id`) FROM `default_settings`)  →  SET @next := IFNULL(@mx, 0) + 1  →  ALTER TABLE `default_settings` MODIFY COLUMN `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT = @next
[ensure auto increment primary key] default_sims_parents.id: INT UNSIGNED PRIMARY KEY → Already a single integer primary key (leave as-is)
[ensure auto increment primary key] default_survey_administrator_associations.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_survey_membership_type_associations.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_survey_person_type_associations.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_surveys_preview_temporary.slug: VARCHAR(255) PRIMARY KEY → Single-column primary key is not integer; skipping (set replace_single_non_int_primary=true to add an integer id primary key)
[ensure auto increment primary key] default_tag_clubs.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_user_ac_managers.(composite key): many-to-many join table → OK to keep composite primary key on the two foreign keys; no surrogate id needed
[ensure auto increment primary key] default_user_org_types.id: plan → composite primary key → add `id`, keep old key UNIQUE, make `id` primary (current primary key: (`user_id`, `org_type`)) ; ALTER TABLE `default_user_org_types` ADD COLUMN `id` INT UNSIGNED NULL  →  SET @row := 0  →  UPDATE `default_user_org_types` SET `id` = (@row := @row + 1) ORDER BY `user_id` ASC, `org_type` ASC  →  ALTER TABLE `default_user_org_types` ADD UNIQUE `uniq_default_user_org_types_old_pk_d1c940fe` (`user_id`, `org_type`)  →  ALTER TABLE `default_user_org_types` DROP PRIMARY KEY  →  ALTER TABLE `default_user_org_types` MODIFY COLUMN `id` INT UNSIGNED NOT NULL  →  ALTER TABLE `default_user_org_types` ADD PRIMARY KEY (`id`)  →  SET @mx := (SELECT MAX(`id`) FROM `default_user_org_types`)  →  SET @next := IFNULL(@mx, 0) + 1  →  ALTER TABLE `default_user_org_types` MODIFY COLUMN `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT = @next
[ensure auto increment primary key] normalize_int11_test.id: plan → no primary key → add `id` auto-increment primary key ; SET @row := 0  →  UPDATE `normalize_int11_test` SET `id` = (@row := @row + 1)  →  ALTER TABLE `normalize_int11_test` MODIFY COLUMN `id` INT UNSIGNED NOT NULL  →  ALTER TABLE `normalize_int11_test` ADD PRIMARY KEY (`id`)  →  SET @mx := (SELECT MAX(`id`) FROM `normalize_int11_test`)  →  SET @next := IFNULL(@mx, 0) + 1  →  ALTER TABLE `normalize_int11_test` MODIFY COLUMN `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT = @next
Findings: 21
✔ DbFixer\Rule\Integrity\EnsureAutoIncrementPrimaryKeyRule rolled back (dry run)
--------------------------------------------------------------------------------
[END] DB Fix completed at 2025-08-27 07:27:53
